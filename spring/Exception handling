
Exception handling/mapping
1) Specific exception handler
	ResponseStatusException with HttpStatus & message. For each method of controller.
2) Global exception handler (with Validation)
	@ControllerAdvice & extends ResponseEntityExceptionHandler class and override required method - For pre-defined exception with custom behaviour.
	@ControllerAdvice & @ExceptionHandler({NullPointerException.class, ArrayIndexOutOfBoundsException.class, IOException.class}) - For custom exception, not available in ResponseEntityExceptionHandler class


============================== Specific exception handler===================================================================================================
@Entity
@Table(name = "user")
public class User{
@Size(min = 2, max = 50)
	@NotEmpty(message = "Username is Mandatory field. Please provide username")
	@Column(name = "USER_NAME", length = 50, nullable = false, unique = true)
	private String username; // If username = "" then throw MethodArgumentNotValid Exception
	
	@Size(min = 2, max = 50,  message = "FirstName should have atleast 2 characters")
	@Column(name = "FIRST_NAME", length = 50, nullable = false)
	private String firstname; // If firstname = "k" then throw MethodArgumentNotValid Exception

}



UserException.java

public class UserException extends Exception { //Custom compile time exception
	private static final long serialVersionUID = 193272863 // Generate with Ctrl+1.
	public UserException(String message){
		super(message);
	}
}


UserService.java

public User createUser(User user) throws UserException{
	User existingUser = userRepository.findByUsername(user.getUsername());
	if(existingUser != null){ // If user exist then throw exception
		throw new UserException ("User already exist in repository");
	}
	return userRepository.save(user);
}


UserController.java

@RestController
@Validated
@RequestMapping(value = "/users")
public class UserController {
  @ApiOperation(value = "Creates a new user")
	@PostMapping
	public ResponseEntity<Void> createUser(@ApiParam("User information for a new user to be created.") @Valid @RequestBody User user, UriComponentsBuilder builder) {
		try {
			userService.createUser(user);
			HttpHeaders headers = new HttpHeaders();
			headers.setLocation(builder.path("/users/{id}").buildAndExpand(user.getUserid()).toUri());
			return new ResponseEntity<Void>(headers, HttpStatus.CREATED);
			
		} catch(UserExistsException ex) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, ex.getMessage());
		}
	}
	
	@GetMapping("/byusername/{username}")
	public User getUserByUsername(@PathVariable("username") String username) throws UserNameNotFoundException {
		User user =  userService.getUserByUsername(username);
		if(user == null)
			throw new UserNameNotFoundException("Username: '" + username + "' not found in User repository");
		return user;
	
	}
	
	@GetMapping("/{id}")
	public User getUserById(@PathVariable("id") @Min(1) Long id) { // To validate use @Validated at class level. Will throw ConstraintViolationException if id = 0

		try {
			Optional<User> userOptional =  userService.getUserById(id);
			return userOptional.get();
		} catch (UserNotFoundException ex) {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, ex.getMessage());
		}

	}
	
}


While using ResponseStatusException, if the field "trace" is present if you have "spring-boot-devtools" in your dependencies
then response will also includes a long field "trace".
To remove it , in application.properties add below 
server.error.include-stacktrace=never
	
================================================Global exception handler (with Validation)================================================================
If exception occured then throw 500 error which i snot good thus must be handled to throw 404 error with required message.

Exception handling/mapping
1) Specific exception handler
	ResponseStatusException with HttpStatus & message. For each method of controller.
2) Global exception handler (with Validation)
Define a class with Fields to display in response if exception occurred.
	@ControllerAdvice & extends ResponseEntityExceptionHandler class and override required method if already denfined.
		For pre-defined exception with custom behaviour.
	@ControllerAdvice & @ExceptionHandler({NullPointerException.class, ArrayIndexOutOfBoundsException.class, IOException.class})
		For custom exception, may/may not available in ResponseEntityExceptionHandler class. Any exception can used here.


public class CustomErrorDetails { // Fields to display in response if exception occurred.
	
	private Date timestamp;
	private String message;
	private String errordetails;
	//Getter & Setter with parameterized constructor will all states.
	
}

@ControllerAdvice
public class CustomGlobalExceptionHandler extends ResponseEntityExceptionHandler {

	// Validation failed 
	@Override
	protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,
			HttpHeaders headers, HttpStatus status, WebRequest request) { // Copy this method from ResponseEntityExceptionHandler.class, override and then update it 

		CustomErrorDetails customErrorDetails = new CustomErrorDetails(new Date(),
				"From MethodArgumentNotValid Exception in GEH", ex.getMessage());

		return new ResponseEntity<>(customErrorDetails, HttpStatus.BAD_REQUEST);
	}
	
	@ExceptionHandler(UserNameNotFoundException.class) // UserNameNotFoundException is similar like UserException
	public final ResponseEntity<Object> handleUserNameNotFoundException(UserNameNotFoundException ex,
			WebRequest request) {
		CustomErrorDetails customErrorDetails = new CustomErrorDetails(new Date(), ex.getMessage(),
				request.getDescription(false));

		return new ResponseEntity<>(customErrorDetails, HttpStatus.NOT_FOUND);

	}
	
	@ExceptionHandler(ConstraintViolationException.class)
	public final ResponseEntity<Object> handleConstraintViolationException(ConstraintViolationException ex,
			WebRequest request) {
		CustomErrorDetails customErrorDetails = new CustomErrorDetails(new Date(), ex.getMessage(),
				request.getDescription(false));

		return new ResponseEntity<>(customErrorDetails, HttpStatus.BAD_REQUEST);

	}
	
	@ExceptionHandler(ConstraintViolationException.class)
	@ResponseStatus(HttpStatus.BAD_REQUEST)
	public final CustomErrorDetails handleConstraintViolationExceptionVersion2(ConstraintViolationException ex,
			WebRequest request) { // Same as handleConstraintViolationException
		CustomErrorDetails customErrorDetails = new CustomErrorDetails(new Date(), ex.getMessage(),
				request.getDescription(false));

		return customErrorDetails;

	}
	
}
