https://www.baeldung.com/java-keystore-truststore-difference
https://www.baeldung.com/spring-boot-https-self-signed-certificate
https://www.sslshopper.com/article-how-to-create-a-self-signed-certificate-using-java-keytool.html
=============================================================================================================================
HTTPs - HTTP Secure. 
HTTPS also protects against phishing attacks. 
It use SSL/TLS certificate.

=============================================================================================================================
SSL certificate is a small data files in which cryptographic key is digitally bind to an organization's details(for which it belong to).
When this is installed on web server then HTTPs is enabled and then allow secure connection from web server to browser.
Trusted SSL providers will only issue an SSL certificate to a verified company that has gone through several identity checks.


SSL- Secure Sockets Layer. Encrypt sesitive data that is being sent between web server(server) & browser(client).
TLS - Transport Layer Security. Updated & more secured version of SSL. Now all place this is only used. Thus even you ask for SSL, we will get TLS only.

Web browsers give visual cues, such as a lock icon or a green bar, to make sure visitors know when their connection is secured. 
This means that they will trust your website more when they see these cues and will be more likely to buy from you. 

=============================================================================================================================

Truststore & Keystore
Both are used to store SSL certificates in java.
Truststore is used to store public certificates.
Keystore is used to store private certificates.

A JKS file is an encrypted security file used to store a set of cryptographic keys or certificates in the binary Java KeyStore (JKS) format. 
It requires a password to be opened.

Developers use JKS files for a variety of security-related purposes. 
For example, JKS files can be used as part of SSL encryption or to identify the author of an Android app. 
Because JKS files contain sensitive data, they are encrypted and password-protected.

=============================================================================================================================

Self signed SSL certificate to inable HTTPS because server is in Intranet. 

Internet: A global communication accessed through the Web.
Intranet: An internal network local to a company mostly.
Extranet: A part of an intranet that's publicly available mostly through the internet.

A self signed certificate is a certificate that is signed by itself rather than a trusted authority. 
Since any attacker can create a self signed certificate and launch a man-in-the-middle attack, a user can't know whether they are sending their encrypted information to the server or an attacker. 
Because of this, you will almost never want to use a self signed certificate on a public Java server that requires anonymous visitors to connect to your site. 
However, self signed certificates can be used in below scenario
a) An Intranet. When clients only have to go through a local Intranet to get to the server, there is virtually no chance of a man-in-the-middle attack.
b) A Java development server. There is no need to spend extra cash buying a trusted certificate when you are just developing or testing an application.
c) Personal sites with few visitors. If you have a small personal site that transfers non-critical information, there is very little incentive for someone to attack the connection.

Visitors will see a warning in their browsers (like the one below) when connecting to a server that uses a self signed certificate until it is permanently stored in their certificate store.

=====================================Steps to enable HTTPS========================================================================================
1) With JDK, we have keytool.exe under below path. THis will be used to generate and read jks file.
C:\Program Files\Java\jdk1.8.0_45\bin

2) Run this on required location . Assume C:\Users\shankar\repository\ssl-project\src\main\resources
keytool -genkey -alias selfsigned -keyalg RSA -keysize 2048 -validity 360 -keypass greenlearner -storepass password -keystore ssl_keystore.jks 
  
-genkey means generate keystore.
-alias means alias name to certificate generated.
-keyalg tell about algorothm used.
-validity tell valdity in day
-keysize 2048 will create 2048 bit Java keystore

3) We will get ssl_keystore.jks in path C:\Users\shankar\repository\ssl-project\src\main\resources

4) To read ssl_keystore.jks from its location, run below in cmd with password = password (as -storepass password)
keytool -list -v -keystore ssl_keystore.jks -storepass password

5) Put jks file under src\main\resources

6) To enabled HTTPS instead of HTTP (default) in spring boot application with the self-signed certificate
#To accept only HTTPS requests
server.ssl.enabled=true
# The path to the keystore containing the certificate
server.ssl.key-store=classpath:keystore/ssl_keystore.jks # if ssl_keystore.jks is under src\main\resources\keystore
# The format used for the keystore. It could be set to PKCS12 in case it is a PKCS12 file
server.ssl.key-store-type=JKS
# The password used to generate the certificate
server.ssl.key-store-password=password
# The alias mapped to the certificate
server.ssl.key-alias=selfsigned

7) To invoke an HTTPS endpoint with the self-signed certificate.
#trust store location
http.trustStore=classpath:ssl_keystore.jks
#trust store password
http.trustStorePassword=ENC(EncryptedString) which is equal to password

8) Run as spring boot app

9) Localhost will be accessed with https





 
