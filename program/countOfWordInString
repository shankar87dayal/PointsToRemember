public static void countOfWordInString(String strInput){ // My name is my identity! Who  is your co-ordinator? Your NAME is shiv.
		System.out.println("Original strInput=>"+strInput);
		strInput = strInput.replaceAll("  ", " "); // replace two space with single space
		strInput = strInput.replaceAll("[\\.]", ""); // replace .(dot) with no space
		strInput = strInput.replaceAll("[\\?]", ""); // replace ? with no space
		strInput = strInput.replaceAll("!", ""); // replace ! with no space
		System.out.println("After replacing strInput=>"+strInput);
		String[] strArray = strInput.split(" ");
		Map<String,Integer> strMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER); // For CASE_INSENSITIVE_ORDER but no insertion order is maintained.
		//If want to preserve insertion order then use LinkedHashMap.
		
		for(String str:strArray) {
			if(strMap.containsKey(str))
				strMap.put(str, strMap.get(str)+1);
			else
				strMap.put(str, 1);
		}
		System.out.println(strMap);
		
		System.out.println("Does word \"Name\" in string exist? " +  strMap.containsKey("Name")); // This is because of TreeMap with case sensitive.
		System.out.println("Does word \"NaMe\" in string exist? " +  strMap.containsKey("NaMe")); // This is because of TreeMap with case sensitive.
		
		StringBuilder stringBuilderUnique = new StringBuilder();
		StringBuilder stringBuilderDuplicate = new StringBuilder();
		Set<Map.Entry<String, Integer>> entrySet = strMap.entrySet();
		
		for(Map.Entry<String, Integer> entry : entrySet) {
			
			if(entry.getValue() == 1)
				stringBuilderUnique.append(entry.getKey() + ",");
			if(entry.getValue() > 1)
				stringBuilderDuplicate.append(entry.getKey() + ",");
		}
		
		String stringUnique = stringBuilderUnique.toString();
		String stringDuplicate = stringBuilderDuplicate.toString();
		System.out.println("stringUnique: " + stringUnique);
		System.out.println("stringDuplicate: " + stringDuplicate);
		
		
		String[] splitStringUnique = stringUnique.split(",");
		String[] splitStringDuplicate = stringDuplicate.split(",");
		
		System.out.println("Unique character order ");
		for(int i = 0; i < splitStringUnique.length ;i++) {
			System.out.println((i+1) + "=>" + splitStringUnique[i]);
		}
		
		System.out.println("Duplicate character order ");
		for(int i = 0; i < splitStringDuplicate.length ;i++) {
			System.out.println((i+1) + "=>" + splitStringDuplicate[i]);
		}
		
		
	}
  
  
  Output
  =======
  
 Original strInput=>My name is my identity! Who  is your co-ordinator? Your NAME is shiv.
After replacing strInput=>My name is my identity Who is your co-ordinator Your NAME is shiv

{co-ordinator=1, identity=1, is=3, My=2, name=2, shiv=1, Who=1, your=2}

Does word "Name" in string exist? true
Does word "NaMe" in string exist? true

stringUnique: co-ordinator,identity,shiv,Who,
stringDuplicate: is,My,name,your,

Unique character order 
1=>co-ordinator
2=>identity
3=>shiv
4=>Who
Duplicate character order 
1=>is
2=>My
3=>name
4=>your
